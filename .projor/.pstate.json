{
  "generatedSource": [
    {
      "filename": "linux-gtk/build.sh",
      "content": "#!/bin/bash\n\necho \"[Multi Platform Ui App] An app with a user interface, that is created for multiple platforms.\"\necho \"[Multi Platform Ui App] Version 0.0.1\"\n(\n    gcc -Wno-deprecated -Wno-deprecated-declarations \\\n        `pkg-config --cflags gtk+-3.0` \\\n        -o multi-platform-ui-app \\\n        main.c \\\n        `pkg-config --libs gtk+-3.0` && \\\n    echo \"[Multi Platform Ui App] Compilation successful.\"\n) || echo \"[Multi Platform Ui App] Compilation FAILED!\"",
      "contentHash": "1551522441e8e563a4924520810130d42c514e4a9c7d2d8b96e38b7ad2a20902",
      "noWriteIfExists": false
    },
    {
      "filename": "linux-gtk/main.c",
      "content": "#include <gtk/gtk.h>\n\nstatic void show_main_menu(GtkWidget *widget, gpointer data);\nstatic void show_product_list_page(GtkWidget *widget, gpointer data);\nstatic void show_product_detail_page(GtkWidget *widget, gpointer data);\n\nstatic void clear_window(GtkWidget *window) {\n    GList *children, *iter;\n\n    children = gtk_container_get_children(GTK_CONTAINER(window));\n    for (iter = children; iter != NULL; iter = g_list_next(iter)) {\n        gtk_widget_destroy(GTK_WIDGET(iter->data));\n    }\n    g_list_free(children);\n}\n\nstatic void show_main_menu(GtkWidget *widget, gpointer data) {\n    GtkWidget *window = GTK_WIDGET(data);\n\n    clear_window(window);  // Clear the previous contents\n\n    GtkWidget *main_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);\n    gtk_container_add(GTK_CONTAINER(window), main_box);\n\n    // Add the main menu title\n    GtkWidget *title_label = gtk_label_new(NULL);\n    gtk_label_set_markup(GTK_LABEL(title_label), \"<span font='24'>Main Menu</span>\");\n    gtk_box_pack_start(GTK_BOX(main_box), title_label, FALSE, FALSE, 0);\n\n    // Add the description label\n    GtkWidget *description_label = gtk_label_new(\"Navigate to a different page by clicking one of the buttons below.\");\n    gtk_box_pack_start(GTK_BOX(main_box), description_label, FALSE, FALSE, 0);\n\n    // Create a scrolled window\n    GtkWidget *scrolled_window = gtk_scrolled_window_new(NULL, NULL);\n    gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled_window), GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);\n    gtk_box_pack_start(GTK_BOX(main_box), scrolled_window, TRUE, TRUE, 0);\n\n    // Create a box to hold buttons inside the scrolled window\n    GtkWidget *button_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);\n    gtk_container_add(GTK_CONTAINER(scrolled_window), button_box);\n\n    // Create buttons with limited size\n    GtkWidget *button_product_list_page = gtk_button_new_with_label(\"Product List Page\");\n    gtk_widget_set_size_request(button_product_list_page, 200, 50);\n    g_signal_connect(button_product_list_page, \"clicked\", G_CALLBACK(show_product_list_page), window);\n    gtk_box_pack_start(GTK_BOX(button_box), button_product_list_page, FALSE, FALSE, 0);\n    GtkWidget *button_product_detail_page = gtk_button_new_with_label(\"Product Detail Page\");\n    gtk_widget_set_size_request(button_product_detail_page, 200, 50);\n    g_signal_connect(button_product_detail_page, \"clicked\", G_CALLBACK(show_product_detail_page), window);\n    gtk_box_pack_start(GTK_BOX(button_box), button_product_detail_page, FALSE, FALSE, 0);\n\n    gtk_widget_show_all(window);\n}\n\n/** The page that lists all products */\nstatic void show_product_list_page(GtkWidget *widget, gpointer data) {\n    GtkWidget *window = GTK_WIDGET(data);\n\n    clear_window(window);  // Clear the previous contents\n\n    GtkWidget *main_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);\n    gtk_container_add(GTK_CONTAINER(window), main_box);\n\n    // Add the Product List Page title\n    GtkWidget *title_label = gtk_label_new(NULL);\n    gtk_label_set_markup(GTK_LABEL(title_label), \"<span font='24'>Product List Page</span>\");\n    gtk_box_pack_start(GTK_BOX(main_box), title_label, FALSE, FALSE, 0);\n\n    // Add the description label\n    GtkWidget *description_label = gtk_label_new(\"The page that lists all products\");\n    gtk_box_pack_start(GTK_BOX(main_box), description_label, FALSE, FALSE, 0);\n\n    // Create a box to hold the back button\n    GtkWidget *button_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);\n    gtk_box_pack_start(GTK_BOX(main_box), button_box, TRUE, TRUE, 0);\n\n    // Create a smaller back button\n    GtkWidget *back_button = gtk_button_new_with_label(\"Back\");\n    gtk_widget_set_size_request(back_button, 100, 30);  // Set smaller size for the button\n    g_signal_connect(back_button, \"clicked\", G_CALLBACK(show_main_menu), window);\n    gtk_box_pack_start(GTK_BOX(button_box), back_button, FALSE, FALSE, 0);\n\n    gtk_widget_show_all(window);\n}\n/** The page that shows the details of a product */\nstatic void show_product_detail_page(GtkWidget *widget, gpointer data) {\n    GtkWidget *window = GTK_WIDGET(data);\n\n    clear_window(window);  // Clear the previous contents\n\n    GtkWidget *main_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);\n    gtk_container_add(GTK_CONTAINER(window), main_box);\n\n    // Add the Product List Page title\n    GtkWidget *title_label = gtk_label_new(NULL);\n    gtk_label_set_markup(GTK_LABEL(title_label), \"<span font='24'>Product Detail Page</span>\");\n    gtk_box_pack_start(GTK_BOX(main_box), title_label, FALSE, FALSE, 0);\n\n    // Add the description label\n    GtkWidget *description_label = gtk_label_new(\"The page that shows the details of a product\");\n    gtk_box_pack_start(GTK_BOX(main_box), description_label, FALSE, FALSE, 0);\n\n    // Create a box to hold the back button\n    GtkWidget *button_box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 5);\n    gtk_box_pack_start(GTK_BOX(main_box), button_box, TRUE, TRUE, 0);\n\n    // Create a smaller back button\n    GtkWidget *back_button = gtk_button_new_with_label(\"Back\");\n    gtk_widget_set_size_request(back_button, 100, 30);  // Set smaller size for the button\n    g_signal_connect(back_button, \"clicked\", G_CALLBACK(show_main_menu), window);\n    gtk_box_pack_start(GTK_BOX(button_box), back_button, FALSE, FALSE, 0);\n\n    gtk_widget_show_all(window);\n}\n\nstatic void activate(GtkApplication *app, gpointer user_data) {\n    GtkWidget *window;\n\n    window = gtk_application_window_new(app);\n    gtk_window_set_title(GTK_WINDOW(window), \"Multi Platform UI App\");\n    gtk_window_set_default_size(GTK_WINDOW(window), 400, 300);\n\n    show_main_menu(NULL, window);  // Show the main menu on startup\n\n    gtk_widget_show_all(window);\n}\n\nint main(int argc, char **argv) {\n    GtkApplication *app;\n    int status;\n\n    app = gtk_application_new(\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n    g_signal_connect(app, \"activate\", G_CALLBACK(activate), NULL);\n    status = g_application_run(G_APPLICATION(app), argc, argv);\n    g_object_unref(app);\n\n    return status;\n}",
      "contentHash": "4165c34ccb07e844eae9f2c5d2bb278a592ad66d1af2f37112977dd6082b08de",
      "noWriteIfExists": false
    },
    {
      "filename": "linux-gtk/README.md",
      "content": "# Linux (GTK) Example\n\n_Dependencies: To be able to build and run this project, you need to install the following._\n\n* _Ubuntu_: `sudo apt-get install build-essential pkg-config libgtk-3-dev`\n* (_To be able to generate the code_) [ProJor](https://docs.siocode.hu/projor)\n\n_Building: These are the steps to build and run the project._\n\n* Run `source build.sh` to build the project.\n* Run `./multi-platform-ui-app` to run the project.",
      "contentHash": "9efaf13084747442ad2e69ff34a3b30cbb4ff2be4079cf64c3275294099119cb",
      "noWriteIfExists": false
    },
    {
      "filename": "README.md",
      "content": "# ProJor Multi Platform UI App Example\n\nThis repository contains the source code for the ProJor Multi Platform UI App Example application. The repository uses [ProJor](https://docs.siocode.hu/projor), the model-based code generator to maintain most of the source code. See in the `.projor/` directory to examine the schema, model, and templates used to generate the code.\n\nThis example is documented [here](https://docs.siocode.hu/projor/full-examples/multi-platform-ui.html).\n\nThis repository generates the **same application** for **3 different platforms**:\n\n* Universal Windows Platform (UWP)\n* Web (React + Tailwind)\n* Linux (GTK)\n\n## Screenshots\n\n_Universal Windows Platform (UWP)_\n\n| Image 1 | Image 2 |\n| --- | --- |\n| ![Main menu on UWP](screenshots/uwp-mainmenu.png) | ![Product List Page on UWP](screenshots/uwp-productlistpage.png) |\n| _This screenshot shows how the main menu looks like on Windows, using UWP._ | _This screenshot shows how the product list page looks like on Windows, using UWP._ |\n\n_Web (React + Tailwind)_\n\n| Image 1 | Image 2 |\n| --- | --- |\n| ![Main menu on Web](screenshots/web-mainmenu.png) | ![Product List Page on Web](screenshots/web-productlistpage.png) |\n| _This screenshot shows how the main menu looks like on the web, using React and Tailwind._ |  _This screenshot shows how the product list page looks like on the web, using React and Tailwind._ |\n\n_Linux (GTK)_\n\n| Image 1 | Image 2 |\n| --- | --- |\n| ![Main menu on Linux](screenshots/gtk-mainmenu.png) | ![Product List Page on Linux](screenshots/gtk-productlistpage.png) |\n| _This screenshot shows how the main menu looks like on Linux, using GTK._ |  _This screenshot shows how the product list page looks like on Linux, using GTK._ |\n\n## Platform Docs\n\nBuilding & development instructions for the respective platforms are available in each platform project's own README file:\n\n* [Universal Windows Platform (UWP)](windows-uwp/README.md)\n* [Web (React + Tailwind)](web-react/README.md)\n* [Linux (GTK)](linux-gtk/README.md)\n\n## Generated Docs\n\nThe apps contain the following pages:\n\n* **Product List Page**: The page that lists all products\n* **Product Detail Page**: The page that shows the details of a product\n",
      "contentHash": "b25fd2801ebff72fd4ff779669db0683ebd9f25d34d4f42a1455b389aae4c60f",
      "noWriteIfExists": false
    },
    {
      "filename": "web-react/package.json",
      "content": "{\n    \"name\": \"@siocode/multi-platform-ui-app-web-react\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"description\": \"An app with a user interface, that is created for multiple platforms.\",\n    \"dependencies\": {\n        \"react\": \"18.3.1\",\n        \"react-dom\": \"18.3.1\"\n    },\n    \"devDependencies\": {\n        \"esbuild\": \"0.23.1\",\n        \"http-server\": \"14.1.1\"\n    },\n    \"scripts\": {\n        \"build\": \"esbuild src/index.jsx --jsx=automatic --bundle --minify --platform=browser --outfile=public/index.bundle.js\",\n        \"serve\": \"http-server public\"\n    }\n}",
      "contentHash": "d07582fa8612c36063dc116e61b87c9d74f13f0d3ea509f4ade34f66a0074862",
      "noWriteIfExists": false
    },
    {
      "filename": "web-react/public/index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Multi Platform Ui App</title>\n        <meta name=\"description\" content=\"\">\n        <script src=\"https://cdn.tailwindcss.com\"></script>\n    </head>\n    <body>\n        <div id=\"root\" class=\"w-full h-full\"></div>\n        <script src=\"index.bundle.js\"></script>\n    </body>\n</html>",
      "contentHash": "860a04e62aa01d2692ff4fe4afaf8fed8d0db6bf1cee322dd1c470fd8b214181",
      "noWriteIfExists": false
    },
    {
      "filename": "web-react/README.md",
      "content": "# Web (React + Tailwind) Example\n\n_Dependencies: To be able to build and run this project, you need to install the following._\n\n* [Node.JS](https://nodejs.org/) (and [NPM](https://www.npmjs.com/))\n* (_To be able to generate the code_) [ProJor](https://docs.siocode.hu/projor)\n\n_Building: These are the steps to build and run the project._\n\n* Run `npm install` to install the dependencies.\n* Run `npm run build` to build the project.\n* Run `npm run serve` to serve the project on `http://localhost:8080`.",
      "contentHash": "f16a2fccddca3e1a4a9242bd36ca4fc86de1014b171b87e8469eda39563b8c05",
      "noWriteIfExists": false
    },
    {
      "filename": "web-react/src/index.jsx",
      "content": "import { createRoot } from \"react-dom/client\";\nimport {\n    useState,\n    useEffect,\n    useRef\n} from \"react\";\nimport { ProductListPage } from \"./pages/product-list-page.page\";\nimport { ProductDetailPage } from \"./pages/product-detail-page.page\";\n\nfunction MainMenu(props) {\n    return <div className=\"flex items-center justify-center w-screen h-screen\">\n        <div className=\"h-96 rounded-lg p-4 border-gray-100 border-2\">\n            <h1 className=\"text-4xl font-bold\">Main menu</h1>\n            <p className=\"text-normal\">\n                Navigate to a different page by clicking one of the buttons below.\n            </p>\n            <div className=\"flex flex-col justify-start items-center overflow-y-auto h-64 p-4\">\n                <button className=\"m-2 p-2 bg-blue-500 text-white rounded-lg\" onClick={() => {\n                    if(props.onNavigate) props.onNavigate(\"ProductListPage\");\n                } }>\n                    Product List Page\n                </button>\n                <button className=\"m-2 p-2 bg-blue-500 text-white rounded-lg\" onClick={() => {\n                    if(props.onNavigate) props.onNavigate(\"ProductDetailPage\");\n                } }>\n                    Product Detail Page\n                </button>\n            </div>\n        </div>\n    </div>\n}\n\nconst routes = [\n    {\n        path: \"MainMenu\",\n        component: MainMenu\n    },\n    {\n        path: \"ProductListPage\",\n        component: ProductListPage\n    },\n    {\n        path: \"ProductDetailPage\",\n        component: ProductDetailPage\n    },\n];\n\nfunction App() {\n    const [currentRoutePath, setCurrentRoutePath] = useState(\"MainMenu\");\n    const currentRouteComponentRef = useRef(MainMenu);\n\n    const onNavigate = (newPath) => {\n        const newRoute = routes.find(route => route.path === newPath);\n        if(newRoute) {\n            setCurrentRoutePath(newPath);\n            currentRouteComponentRef.current = newRoute.component;\n        }\n    }\n\n    return <>\n        {\n            currentRouteComponentRef.current({\n                onNavigate: onNavigate\n            })\n        }\n    </>\n}\n\nconst rootEl = document.getElementById(\"root\");\nconst root = createRoot(rootEl);\nroot.render(<App />);",
      "contentHash": "290b82cc8dd9b4a751288fdcd3085bac372541899a61084e0cfe68a01899cba9",
      "noWriteIfExists": false
    },
    {
      "filename": "web-react/src/pages/product-detail-page.page.jsx",
      "content": "import {\n    useEffect,\n    useState,\n    useRef\n} from \"react\";\n\n/** The page that shows the details of a product */\nexport function ProductDetailPage(\n    props\n) {\n    return <div className=\"flex items-center justify-center w-screen h-screen\">\n        <div className=\"rounded-lg p-4 border-gray-100 border-2\">\n            <h1 className=\"text-4xl font-bold\">Product Detail Page</h1>\n            <p className=\"text-normal\">\n                The page that shows the details of a product\n            </p>\n            <button className=\"m-2 p-2 bg-blue-500 text-white rounded-lg\" onClick={() => {\n                if(props.onNavigate) props.onNavigate(\"MainMenu\");\n            }}>Back</button>\n        </div>\n    </div>;\n}",
      "contentHash": "b4bc9d936fe55ea8d42759127c04602bbefb79d6e4a21e4f18fa8b9a01fa0ef9",
      "noWriteIfExists": false
    },
    {
      "filename": "web-react/src/pages/product-list-page.page.jsx",
      "content": "import {\n    useEffect,\n    useState,\n    useRef\n} from \"react\";\n\n/** The page that lists all products */\nexport function ProductListPage(\n    props\n) {\n    return <div className=\"flex items-center justify-center w-screen h-screen\">\n        <div className=\"rounded-lg p-4 border-gray-100 border-2\">\n            <h1 className=\"text-4xl font-bold\">Product List Page</h1>\n            <p className=\"text-normal\">\n                The page that lists all products\n            </p>\n            <button className=\"m-2 p-2 bg-blue-500 text-white rounded-lg\" onClick={() => {\n                if(props.onNavigate) props.onNavigate(\"MainMenu\");\n            }}>Back</button>\n        </div>\n    </div>;\n}",
      "contentHash": "1525b2798c738533cd9b5e78400c659449daac1b67c35bbfdca06eef87295ff3",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/MainPage.xaml",
      "content": "<Page\n    x:Class=\"windows_uwp.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:windows_uwp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\"\n    Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n\n    <Grid>\n        <StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" Padding=\"10,10,10,10\" CornerRadius=\"12\" BorderThickness=\"2\" BorderBrush=\"LightGray\">\n            <TextBlock Margin=\"0,0,0,0\" TextWrapping=\"Wrap\" Text=\"Main Menu\" FontSize=\"48\" FontFamily=\"Arial Black\" />\n            <TextBlock Margin=\"0,0,0,0\" TextWrapping=\"Wrap\" Text=\"Navigate to a different page by clicking one of the buttons below.\" FontSize=\"11\" FontFamily=\"Arial\" />\n            \n            <ScrollViewer HorizontalScrollMode=\"Enabled\" MaxHeight=\"400\">\n                <StackPanel HorizontalAlignment=\"Center\">\n                    <Button Content=\"Product List Page\" Margin=\"0,6,0,6\" VerticalAlignment=\"Top\" Click=\"OnNavigateToProductListPage\" />\n                    <Button Content=\"Product Detail Page\" Margin=\"0,6,0,6\" VerticalAlignment=\"Top\" Click=\"OnNavigateToProductDetailPage\" />\n                </StackPanel>\n            </ScrollViewer>\n        </StackPanel>\n    </Grid>\n</Page>",
      "contentHash": "dcfea5b68ec67b51242187121408764af83e5186fe2996505a28ad4c9769f8d2",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/MainPage.xaml.cs",
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices.WindowsRuntime;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Navigation;\n\nnamespace windows_uwp\n{\n    /// <summary>\n    /// The main page, which is implemented as a main menu.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        public MainPage()\n        {\n            this.InitializeComponent();\n        }\n\n        /// <summary>\n        /// Navigates to the Product List Page page.\n        /// </summary>\n        public void OnNavigateToProductListPage(object sender, RoutedEventArgs e)\n        {\n            Frame.Navigate(typeof(ProductListPage));\n        }\n        /// <summary>\n        /// Navigates to the Product Detail Page page.\n        /// </summary>\n        public void OnNavigateToProductDetailPage(object sender, RoutedEventArgs e)\n        {\n            Frame.Navigate(typeof(ProductDetailPage));\n        }\n\n    }\n}",
      "contentHash": "ec595dc9bec686fcfc6e48d32bdbb77412a5fa9a386180240d9b738d5e6ca11d",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/Package.appxmanifest",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<Package\n  xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\"\n  xmlns:mp=\"http://schemas.microsoft.com/appx/2014/phone/manifest\"\n  xmlns:uap=\"http://schemas.microsoft.com/appx/manifest/uap/windows10\"\n  IgnorableNamespaces=\"uap mp\">\n\n  <Identity\n    Name=\"27dc4152-8c74-4938-85b0-1ae15f1336d1\"\n    Publisher=\"CN=boton\"\n    Version=\"0.0.1.0\" />\n\n  <mp:PhoneIdentity PhoneProductId=\"27dc4152-8c74-4938-85b0-1ae15f1336d1\" PhonePublisherId=\"00000000-0000-0000-0000-000000000000\"/>\n\n  <Properties>\n    <DisplayName>windows_uwp</DisplayName>\n    <PublisherDisplayName>boton</PublisherDisplayName>\n    <Logo>Assets\\StoreLogo.png</Logo>\n  </Properties>\n\n  <Dependencies>\n    <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.0.0\" MaxVersionTested=\"10.0.0.0\" />\n  </Dependencies>\n\n  <Resources>\n    <Resource Language=\"x-generate\"/>\n  </Resources>\n\n  <Applications>\n    <Application Id=\"App\"\n      Executable=\"$targetnametoken$.exe\"\n      EntryPoint=\"windows_uwp.App\">\n      <uap:VisualElements\n        DisplayName=\"Multi Platform UI App\"\n        Square150x150Logo=\"Assets\\Square150x150Logo.png\"\n        Square44x44Logo=\"Assets\\Square44x44Logo.png\"\n        Description=\"An app with a user interface, that is created for multiple platforms.\"\n        BackgroundColor=\"transparent\">\n        <uap:DefaultTile Wide310x150Logo=\"Assets\\Wide310x150Logo.png\"/>\n        <uap:SplashScreen Image=\"Assets\\SplashScreen.png\" />\n      </uap:VisualElements>\n    </Application>\n  </Applications>\n\n  <Capabilities>\n    <Capability Name=\"internetClient\" />\n  </Capabilities>\n</Package>",
      "contentHash": "9806889ead167c9eb605539126ba381ba9abbd878e6d36f29b94e5142dea9913",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/Pages/ProductDetailPage.xaml",
      "content": "<Page\n    x:Class=\"windows_uwp.ProductDetailPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:windows_uwp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\"\n    Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n\n    <Grid>\n        <StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" Padding=\"10,10,10,10\" CornerRadius=\"12\" BorderThickness=\"2\" BorderBrush=\"LightGray\">\n            <TextBlock Margin=\"0,0,0,0\" TextWrapping=\"Wrap\" Text=\"Product Detail Page works.\" FontSize=\"48\" FontFamily=\"Arial Black\" />\n            <TextBlock Margin=\"0,0,0,0\" TextWrapping=\"Wrap\" Text=\"The page that shows the details of a product\" FontSize=\"11\" FontFamily=\"Arial\" />\n            <Button Margin=\"0,6,0,6\" HorizontalAlignment=\"Center\" Content=\"Back\" Click=\"OnNavigateBack\" />\n        </StackPanel>\n    </Grid>\n</Page>",
      "contentHash": "a54353fbb2e7b64e5acaad7424ac87aec688c06e969b074c96a72d06a05eed13",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/Pages/ProductDetailPage.xaml.cs",
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices.WindowsRuntime;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Navigation;\n\nnamespace windows_uwp\n{\n    /// <summary>\n    /// The page that shows the details of a product\n    /// </summary>\n    public sealed partial class ProductDetailPage : Page\n    {\n        public ProductDetailPage()\n        {\n            this.InitializeComponent();\n        }\n        \n        public void OnNavigateBack(object sender, RoutedEventArgs e)\n        {\n            Frame.GoBack();\n        }\n    }\n}",
      "contentHash": "511b1bb6b22a247c132475ee0291e49d22cf7331dbe5890d75e869a4ea300696",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/Pages/ProductListPage.xaml",
      "content": "<Page\n    x:Class=\"windows_uwp.ProductListPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:windows_uwp\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\"\n    Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n\n    <Grid>\n        <StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" Padding=\"10,10,10,10\" CornerRadius=\"12\" BorderThickness=\"2\" BorderBrush=\"LightGray\">\n            <TextBlock Margin=\"0,0,0,0\" TextWrapping=\"Wrap\" Text=\"Product List Page works.\" FontSize=\"48\" FontFamily=\"Arial Black\" />\n            <TextBlock Margin=\"0,0,0,0\" TextWrapping=\"Wrap\" Text=\"The page that lists all products\" FontSize=\"11\" FontFamily=\"Arial\" />\n            <Button Margin=\"0,6,0,6\" HorizontalAlignment=\"Center\" Content=\"Back\" Click=\"OnNavigateBack\" />\n        </StackPanel>\n    </Grid>\n</Page>",
      "contentHash": "d40cb871cc77aef865d76d3c9bd555ef862190ded6c58a8d8e5cb20c7d6a025b",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/Pages/ProductListPage.xaml.cs",
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices.WindowsRuntime;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Navigation;\n\nnamespace windows_uwp\n{\n    /// <summary>\n    /// The page that lists all products\n    /// </summary>\n    public sealed partial class ProductListPage : Page\n    {\n        public ProductListPage()\n        {\n            this.InitializeComponent();\n        }\n        \n        public void OnNavigateBack(object sender, RoutedEventArgs e)\n        {\n            Frame.GoBack();\n        }\n    }\n}",
      "contentHash": "a3ecdaded1b3564611a70c0c18d4b8f1552f2b402b0ad021257313fe4afa16f9",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/README.md",
      "content": "# Universal Windows Platform (UWP) Example\n\n_Dependencies: To be able to build and run this project, you need to install the following._\n\n* [Visual Studio](https://visualstudio.microsoft.com/)\n    * Make sure to install _C#_, _UWP_, and _Windows 10 SDK_ components.\n* (_To be able to generate the code_) [ProJor](https://docs.siocode.hu/projor)\n\n_Building: These are the steps to build and run the project._\n\n* Open the `windows-uwp/windows-uwp.sln` solution file in Visual Studio.\n* Wait for everything to load correctly.\n* Select `Debug` and `x86` from the top menu, and click on the `Local Machine` button to run the app.",
      "contentHash": "8072a4ffc22c1eb620e67270e526f2cf56fc9eb3a67a67e58451951d1c10b376",
      "noWriteIfExists": false
    },
    {
      "filename": "windows-uwp/windows-uwp.csproj",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"15.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">x86</Platform>\n    <ProjectGuid>{962098C6-E8FF-47E4-B6F8-FE5C243D67C9}</ProjectGuid>\n    <OutputType>AppContainerExe</OutputType>\n    <AppDesignerFolder>Properties</AppDesignerFolder>\n    <RootNamespace>windows_uwp</RootNamespace>\n    <AssemblyName>windows-uwp</AssemblyName>\n    <DefaultLanguage>en-US</DefaultLanguage>\n    <TargetPlatformIdentifier>UAP</TargetPlatformIdentifier>\n    <TargetPlatformVersion Condition=\" '$(TargetPlatformVersion)' == '' \">10.0.19041.0</TargetPlatformVersion>\n    <TargetPlatformMinVersion>10.0.19041.0</TargetPlatformMinVersion>\n    <MinimumVisualStudioVersion>14</MinimumVisualStudioVersion>\n    <FileAlignment>512</FileAlignment>\n    <ProjectTypeGuids>{A5A43C5B-DE2A-4C0C-9213-0A381AF9435A};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>\n    <WindowsXamlEnableOverview>true</WindowsXamlEnableOverview>\n    <AppxPackageSigningEnabled>false</AppxPackageSigningEnabled>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x86'\">\n    <DebugSymbols>true</DebugSymbols>\n    <OutputPath>bin\\x86\\Debug\\</OutputPath>\n    <DefineConstants>DEBUG;TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>full</DebugType>\n    <PlatformTarget>x86</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|x86'\">\n    <OutputPath>bin\\x86\\Release\\</OutputPath>\n    <DefineConstants>TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <Optimize>true</Optimize>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>pdbonly</DebugType>\n    <PlatformTarget>x86</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|ARM'\">\n    <DebugSymbols>true</DebugSymbols>\n    <OutputPath>bin\\ARM\\Debug\\</OutputPath>\n    <DefineConstants>DEBUG;TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>full</DebugType>\n    <PlatformTarget>ARM</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|ARM'\">\n    <OutputPath>bin\\ARM\\Release\\</OutputPath>\n    <DefineConstants>TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <Optimize>true</Optimize>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>pdbonly</DebugType>\n    <PlatformTarget>ARM</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|ARM64'\">\n    <DebugSymbols>true</DebugSymbols>\n    <OutputPath>bin\\ARM64\\Debug\\</OutputPath>\n    <DefineConstants>DEBUG;TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>full</DebugType>\n    <PlatformTarget>ARM64</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|ARM64'\">\n    <OutputPath>bin\\ARM64\\Release\\</OutputPath>\n    <DefineConstants>TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <Optimize>true</Optimize>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>pdbonly</DebugType>\n    <PlatformTarget>ARM64</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Debug|x64'\">\n    <DebugSymbols>true</DebugSymbols>\n    <OutputPath>bin\\x64\\Debug\\</OutputPath>\n    <DefineConstants>DEBUG;TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>full</DebugType>\n    <PlatformTarget>x64</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)' == 'Release|x64'\">\n    <OutputPath>bin\\x64\\Release\\</OutputPath>\n    <DefineConstants>TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>\n    <Optimize>true</Optimize>\n    <NoWarn>;2008</NoWarn>\n    <DebugType>pdbonly</DebugType>\n    <PlatformTarget>x64</PlatformTarget>\n    <UseVSHostingProcess>false</UseVSHostingProcess>\n    <ErrorReport>prompt</ErrorReport>\n    <Prefer32Bit>true</Prefer32Bit>\n    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>\n  </PropertyGroup>\n  <PropertyGroup>\n    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>\n  </PropertyGroup>\n  <ItemGroup>\n    <Compile Include=\"App.xaml.cs\">\n      <DependentUpon>App.xaml</DependentUpon>\n    </Compile>\n    <Compile Include=\"MainPage.xaml.cs\">\n      <DependentUpon>MainPage.xaml</DependentUpon>\n    </Compile>\n    <Compile Include=\"Pages\\ProductListPage.xaml.cs\">\n      <DependentUpon>ProductListPage.xaml</DependentUpon>\n    </Compile>\n    <Compile Include=\"Pages\\ProductDetailPage.xaml.cs\">\n      <DependentUpon>ProductDetailPage.xaml</DependentUpon>\n    </Compile>\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n  </ItemGroup>\n  <ItemGroup>\n    <AppxManifest Include=\"Package.appxmanifest\">\n      <SubType>Designer</SubType>\n    </AppxManifest>\n  </ItemGroup>\n  <ItemGroup>\n    <Content Include=\"Properties\\Default.rd.xml\" />\n    <Content Include=\"Assets\\LockScreenLogo.scale-200.png\" />\n    <Content Include=\"Assets\\SplashScreen.scale-200.png\" />\n    <Content Include=\"Assets\\Square150x150Logo.scale-200.png\" />\n    <Content Include=\"Assets\\Square44x44Logo.scale-200.png\" />\n    <Content Include=\"Assets\\Square44x44Logo.targetsize-24_altform-unplated.png\" />\n    <Content Include=\"Assets\\StoreLogo.png\" />\n    <Content Include=\"Assets\\Wide310x150Logo.scale-200.png\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ApplicationDefinition Include=\"App.xaml\">\n      <Generator>MSBuild:Compile</Generator>\n      <SubType>Designer</SubType>\n    </ApplicationDefinition>\n    <Page Include=\"MainPage.xaml\">\n      <Generator>MSBuild:Compile</Generator>\n      <SubType>Designer</SubType>\n    </Page>\n    <Page Include=\"Pages\\ProductListPage.xaml\">\n      <SubType>Designer</SubType>\n      <Generator>MSBuild:Compile</Generator>\n    </Page>\n    <Page Include=\"Pages\\ProductDetailPage.xaml\">\n      <SubType>Designer</SubType>\n      <Generator>MSBuild:Compile</Generator>\n    </Page>\n  </ItemGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NETCore.UniversalWindowsPlatform\">\n      <Version>6.2.14</Version>\n    </PackageReference>\n  </ItemGroup>\n  <PropertyGroup Condition=\" '$(VisualStudioVersion)' == '' or '$(VisualStudioVersion)' &lt; '14.0' \">\n    <VisualStudioVersion>14.0</VisualStudioVersion>\n  </PropertyGroup>\n  <Import Project=\"$(MSBuildExtensionsPath)\\Microsoft\\WindowsXaml\\v$(VisualStudioVersion)\\Microsoft.Windows.UI.Xaml.CSharp.targets\" />\n  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. \n       Other similar extension points exist, see Microsoft.Common.targets.\n  <Target Name=\"BeforeBuild\">\n  </Target>\n  <Target Name=\"AfterBuild\">\n  </Target>\n  -->\n</Project>",
      "contentHash": "b50fd2056d34776cf224eaa5eda16752b46c30fe03a3821d7c5901c40a9f2419",
      "noWriteIfExists": false
    }
  ]
}